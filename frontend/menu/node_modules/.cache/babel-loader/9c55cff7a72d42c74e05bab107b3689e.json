{"ast":null,"code":"var _jsxFileName = \"/home/adolfo/menu_app/frontend/menu/src/context/userContext.js\",\n    _s = $RefreshSig$();\n\nimport React, { createContext, useEffect, useState } from \"react\"; // import getDishCategories from \"../services/dishCategory/getDishCategories\";\n\nimport { DISH_CATEGORIES } from \"../services/settings\";\nimport { fetchData } from \"../services/fetchData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext({});\nconst CategoriesContext = /*#__PURE__*/createContext({});\nconst UpdateViewContext = /*#__PURE__*/createContext({});\nconst ToastVisibilityContext = /*#__PURE__*/createContext({});\nconst DishesContext = /*#__PURE__*/createContext({}); // const fetchCategories = fetchData(DISH_CATEGORIES);\n\nconst UserContextProvider = _ref => {\n  _s();\n\n  let {\n    children\n  } = _ref;\n  const [userLogged, setUserLogged] = useState(null);\n  const [csrfToken, setCsrfToken] = useState(null);\n  const [userLoggedId, setUserLoggedId] = useState(null);\n  const [updateView, setUpdateView] = useState(1);\n  const [dishCategories, setDishCategories] = useState([]);\n  const [dishes, setDishes] = useState([]);\n  const [toastVisible, setToastVisible] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState('');\n  useEffect(() => {\n    const getUserLoggedTokenValue = () => {\n      return window.localStorage.getItem(\"logedUserToken\");\n    };\n\n    const getCsrftokenValue = () => {\n      var _document$cookie$spli;\n\n      return (_document$cookie$spli = document.cookie.split(\"; \").find(row => row.startsWith(\"csrftoken=\"))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split(\"=\")[1];\n    };\n\n    const getUserLoggedId = () => {\n      return window.localStorage.getItem(\"logedUserId\");\n    };\n\n    if (getUserLoggedTokenValue) {\n      setUserLogged(getUserLoggedTokenValue);\n      setCsrfToken(getCsrftokenValue);\n      setUserLoggedId(getUserLoggedId);\n    }\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      'token': [userLogged, setUserLogged],\n      'csfrToken': [csrfToken, setCsrfToken],\n      'userLoggedId': [userLoggedId, setUserLoggedId]\n    },\n    children: /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n      value: [dishCategories, setDishCategories],\n      children: /*#__PURE__*/_jsxDEV(UpdateViewContext.Provider, {\n        value: [updateView, setUpdateView],\n        children: /*#__PURE__*/_jsxDEV(ToastVisibilityContext.Provider, {\n          value: [toastVisible, setToastVisible, toastMessage, setToastMessage, toastType, setToastType],\n          children: /*#__PURE__*/_jsxDEV(DishesContext.Provider, {\n            value: [dishes, setDishes],\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 58,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 57,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 54,\n    columnNumber: 7\n  }, this);\n};\n\n_s(UserContextProvider, \"XyyBkbpxYom0ndVIOuJ4eU8BtYQ=\");\n\n_c = UserContextProvider;\nexport { Context, CategoriesContext, UpdateViewContext, ToastVisibilityContext, DishesContext, UserContextProvider };\n\nvar _c;\n\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","DISH_CATEGORIES","fetchData","Context","CategoriesContext","UpdateViewContext","ToastVisibilityContext","DishesContext","UserContextProvider","children","userLogged","setUserLogged","csrfToken","setCsrfToken","userLoggedId","setUserLoggedId","updateView","setUpdateView","dishCategories","setDishCategories","dishes","setDishes","toastVisible","setToastVisible","toastMessage","setToastMessage","toastType","setToastType","getUserLoggedTokenValue","window","localStorage","getItem","getCsrftokenValue","document","cookie","split","find","row","startsWith","getUserLoggedId"],"sources":["/home/adolfo/menu_app/frontend/menu/src/context/userContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n// import getDishCategories from \"../services/dishCategory/getDishCategories\";\nimport {DISH_CATEGORIES} from \"../services/settings\"\nimport { fetchData } from \"../services/fetchData\";\n\nconst Context = createContext({})\nconst CategoriesContext = createContext({})\nconst UpdateViewContext = createContext({})\nconst ToastVisibilityContext = createContext({})\nconst DishesContext = createContext({})\n\n\n// const fetchCategories = fetchData(DISH_CATEGORIES);\n\nconst UserContextProvider = ({ children }) => {\n    \n    \n    const [userLogged, setUserLogged] = useState(null)\n    const [csrfToken, setCsrfToken] = useState(null)\n    const [userLoggedId, setUserLoggedId] = useState(null)\n    const [updateView, setUpdateView] = useState(1)\n    const [dishCategories, setDishCategories] = useState([])\n    const [dishes, setDishes] = useState([])\n    const [toastVisible, setToastVisible] = useState(false);\n    const [toastMessage, setToastMessage] = useState('')\n    const [toastType, setToastType] = useState('')\n    \n    useEffect(() => {\n        const getUserLoggedTokenValue = () => {\n            return window.localStorage.getItem(\"logedUserToken\");\n        };\n\n        const getCsrftokenValue = () => {\n            return document.cookie\n                .split(\"; \")\n                .find((row) => row.startsWith(\"csrftoken=\"))\n                ?.split(\"=\")[1];\n        };\n\n        const getUserLoggedId = () => {\n            return window.localStorage.getItem(\"logedUserId\");\n        };\n\n        if (getUserLoggedTokenValue) {\n            setUserLogged(getUserLoggedTokenValue);\n            setCsrfToken(getCsrftokenValue);\n            setUserLoggedId(getUserLoggedId);\n        }\n\n        }, []);\n        \n    return (\n    \n      <Context.Provider value={{'token':[userLogged, setUserLogged], 'csfrToken': [csrfToken, setCsrfToken], 'userLoggedId': [userLoggedId, setUserLoggedId]}}>\n        <CategoriesContext.Provider value={[dishCategories, setDishCategories]}>\n          <UpdateViewContext.Provider value={[updateView, setUpdateView]}>\n            <ToastVisibilityContext.Provider value={[toastVisible, setToastVisible, toastMessage, setToastMessage, toastType, setToastType]}>\n                <DishesContext.Provider value={[dishes, setDishes]}>\n                    {/*states sent as Context value parameter*/}\n                    {children}\n                </DishesContext.Provider>\n            </ToastVisibilityContext.Provider>\n          </UpdateViewContext.Provider>\n        </CategoriesContext.Provider>\n      </Context.Provider>\n      \n      )\n}\n\nexport { Context, CategoriesContext, UpdateViewContext, ToastVisibilityContext, DishesContext, UserContextProvider }"],"mappings":";;;AAAA,OAAOA,KAAP,IAAgBC,aAAhB,EAA+BC,SAA/B,EAA0CC,QAA1C,QAA0D,OAA1D,C,CACA;;AACA,SAAQC,eAAR,QAA8B,sBAA9B;AACA,SAASC,SAAT,QAA0B,uBAA1B;;AAEA,MAAMC,OAAO,gBAAGL,aAAa,CAAC,EAAD,CAA7B;AACA,MAAMM,iBAAiB,gBAAGN,aAAa,CAAC,EAAD,CAAvC;AACA,MAAMO,iBAAiB,gBAAGP,aAAa,CAAC,EAAD,CAAvC;AACA,MAAMQ,sBAAsB,gBAAGR,aAAa,CAAC,EAAD,CAA5C;AACA,MAAMS,aAAa,gBAAGT,aAAa,CAAC,EAAD,CAAnC,C,CAGA;;AAEA,MAAMU,mBAAmB,GAAG,QAAkB;EAAA;;EAAA,IAAjB;IAAEC;EAAF,CAAiB;EAG1C,MAAM,CAACC,UAAD,EAAaC,aAAb,IAA8BX,QAAQ,CAAC,IAAD,CAA5C;EACA,MAAM,CAACY,SAAD,EAAYC,YAAZ,IAA4Bb,QAAQ,CAAC,IAAD,CAA1C;EACA,MAAM,CAACc,YAAD,EAAeC,eAAf,IAAkCf,QAAQ,CAAC,IAAD,CAAhD;EACA,MAAM,CAACgB,UAAD,EAAaC,aAAb,IAA8BjB,QAAQ,CAAC,CAAD,CAA5C;EACA,MAAM,CAACkB,cAAD,EAAiBC,iBAAjB,IAAsCnB,QAAQ,CAAC,EAAD,CAApD;EACA,MAAM,CAACoB,MAAD,EAASC,SAAT,IAAsBrB,QAAQ,CAAC,EAAD,CAApC;EACA,MAAM,CAACsB,YAAD,EAAeC,eAAf,IAAkCvB,QAAQ,CAAC,KAAD,CAAhD;EACA,MAAM,CAACwB,YAAD,EAAeC,eAAf,IAAkCzB,QAAQ,CAAC,EAAD,CAAhD;EACA,MAAM,CAAC0B,SAAD,EAAYC,YAAZ,IAA4B3B,QAAQ,CAAC,EAAD,CAA1C;EAEAD,SAAS,CAAC,MAAM;IACZ,MAAM6B,uBAAuB,GAAG,MAAM;MAClC,OAAOC,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,gBAA5B,CAAP;IACH,CAFD;;IAIA,MAAMC,iBAAiB,GAAG,MAAM;MAAA;;MAC5B,gCAAOC,QAAQ,CAACC,MAAT,CACFC,KADE,CACI,IADJ,EAEFC,IAFE,CAEIC,GAAD,IAASA,GAAG,CAACC,UAAJ,CAAe,YAAf,CAFZ,CAAP,0DAAO,sBAGDH,KAHC,CAGK,GAHL,EAGU,CAHV,CAAP;IAIH,CALD;;IAOA,MAAMI,eAAe,GAAG,MAAM;MAC1B,OAAOV,MAAM,CAACC,YAAP,CAAoBC,OAApB,CAA4B,aAA5B,CAAP;IACH,CAFD;;IAIA,IAAIH,uBAAJ,EAA6B;MACzBjB,aAAa,CAACiB,uBAAD,CAAb;MACAf,YAAY,CAACmB,iBAAD,CAAZ;MACAjB,eAAe,CAACwB,eAAD,CAAf;IACH;EAEA,CAtBI,EAsBF,EAtBE,CAAT;EAwBA,oBAEE,QAAC,OAAD,CAAS,QAAT;IAAkB,KAAK,EAAE;MAAC,SAAQ,CAAC7B,UAAD,EAAaC,aAAb,CAAT;MAAsC,aAAa,CAACC,SAAD,EAAYC,YAAZ,CAAnD;MAA8E,gBAAgB,CAACC,YAAD,EAAeC,eAAf;IAA9F,CAAzB;IAAA,uBACE,QAAC,iBAAD,CAAmB,QAAnB;MAA4B,KAAK,EAAE,CAACG,cAAD,EAAiBC,iBAAjB,CAAnC;MAAA,uBACE,QAAC,iBAAD,CAAmB,QAAnB;QAA4B,KAAK,EAAE,CAACH,UAAD,EAAaC,aAAb,CAAnC;QAAA,uBACE,QAAC,sBAAD,CAAwB,QAAxB;UAAiC,KAAK,EAAE,CAACK,YAAD,EAAeC,eAAf,EAAgCC,YAAhC,EAA8CC,eAA9C,EAA+DC,SAA/D,EAA0EC,YAA1E,CAAxC;UAAA,uBACI,QAAC,aAAD,CAAe,QAAf;YAAwB,KAAK,EAAE,CAACP,MAAD,EAASC,SAAT,CAA/B;YAAA,UAEKZ;UAFL;YAAA;YAAA;YAAA;UAAA;QADJ;UAAA;UAAA;UAAA;QAAA;MADF;QAAA;QAAA;QAAA;MAAA;IADF;MAAA;MAAA;MAAA;IAAA;EADF;IAAA;IAAA;IAAA;EAAA,QAFF;AAgBH,CArDD;;GAAMD,mB;;KAAAA,mB;AAuDN,SAASL,OAAT,EAAkBC,iBAAlB,EAAqCC,iBAArC,EAAwDC,sBAAxD,EAAgFC,aAAhF,EAA+FC,mBAA/F"},"metadata":{},"sourceType":"module"}