{"ast":null,"code":"var _jsxFileName = \"/home/adolfo/Documents/menu_app_backup/menu_app/frontend/menu/src/context/userContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useEffect, useState } from \"react\";\n// import getDishCategories from \"../services/dishCategory/getDishCategories\";\nimport { DISH_CATEGORIES } from \"../services/settings\";\nimport { fetchData } from \"../services/fetchData\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst Context = /*#__PURE__*/createContext({});\nconst CategoriesContext = /*#__PURE__*/createContext({});\nconst UpdateViewContext = /*#__PURE__*/createContext({});\nconst ToastVisibilityContext = /*#__PURE__*/createContext({});\nconst DishesContext = /*#__PURE__*/createContext({});\n\n// const apiData = fetchData(DISH_CATEGORIES);\n\nconst fetchCategories = fetchData(DISH_CATEGORIES);\nconst UserContextProvider = ({\n  children\n}) => {\n  _s();\n  const apiData = fetchCategories;\n  const dishCategoriesApi = apiData.read();\n  const [userLoggedKey, setUserLoggedKey] = useState(null);\n  const [csrfToken, setCsrfToken] = useState(null);\n  const [userLoggedId, setUserLoggedId] = useState(null);\n  const [userLoggedName, setUserLoggedName] = useState(null);\n  const [updateView, setUpdateView] = useState(1);\n  const [dishCategories, setDishCategories] = useState(dishCategoriesApi);\n  const [dishes, setDishes] = useState([]);\n  const [toastVisible, setToastVisible] = useState(false);\n  const [toastMessage, setToastMessage] = useState('');\n  const [toastType, setToastType] = useState('');\n  useEffect(() => {\n    const getUserLoggedTokenValue = () => {\n      return window.localStorage.getItem('logedUserToken');\n    };\n    const getCsrftokenValue = () => {\n      var _document$cookie$spli;\n      return (_document$cookie$spli = document.cookie.split('; ').find(row => row.startsWith('csrftoken='))) === null || _document$cookie$spli === void 0 ? void 0 : _document$cookie$spli.split('=')[1];\n      // \n    };\n\n    const getUserLoggedId = () => {\n      return window.localStorage.getItem('logedUserId');\n    };\n    const getUserLoggedName = () => {\n      return window.localStorage.getItem('logedUserName');\n    };\n    if (getUserLoggedTokenValue) {\n      setUserLoggedKey(getUserLoggedTokenValue);\n      setCsrfToken(getCsrftokenValue);\n      setUserLoggedId(getUserLoggedId);\n      setUserLoggedName(getUserLoggedName);\n      //console.log('token', userLogged, 'csfrtoken', csrfToken)\n    }\n\n    const apiData = fetchCategories;\n    const dishCategoriesApi = apiData.read();\n    setDishCategories(dishCategoriesApi);\n  }, []);\n  return /*#__PURE__*/_jsxDEV(Context.Provider, {\n    value: {\n      'key': [userLoggedKey, setUserLoggedKey],\n      'csfrToken': [csrfToken, setCsrfToken],\n      'userLoggedId': [userLoggedId, setUserLoggedId],\n      'userLoggedName': [userLoggedName, setUserLoggedName]\n    },\n    children: /*#__PURE__*/_jsxDEV(CategoriesContext.Provider, {\n      value: [dishCategories, setDishCategories],\n      children: /*#__PURE__*/_jsxDEV(UpdateViewContext.Provider, {\n        value: [updateView, setUpdateView],\n        children: /*#__PURE__*/_jsxDEV(ToastVisibilityContext.Provider, {\n          value: [toastVisible, setToastVisible, toastMessage, setToastMessage, toastType, setToastType],\n          children: /*#__PURE__*/_jsxDEV(DishesContext.Provider, {\n            value: [dishes, setDishes],\n            children: children\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 76,\n            columnNumber: 17\n          }, this)\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 75,\n          columnNumber: 13\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 11\n      }, this)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 9\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 7\n  }, this);\n};\n_s(UserContextProvider, \"UnnqzWzsNlOsWdwwMcM1T+Qgu0M=\");\n_c = UserContextProvider;\nexport { Context, CategoriesContext, UpdateViewContext, ToastVisibilityContext, DishesContext, UserContextProvider };\nvar _c;\n$RefreshReg$(_c, \"UserContextProvider\");","map":{"version":3,"names":["React","createContext","useEffect","useState","DISH_CATEGORIES","fetchData","jsxDEV","_jsxDEV","Context","CategoriesContext","UpdateViewContext","ToastVisibilityContext","DishesContext","fetchCategories","UserContextProvider","children","_s","apiData","dishCategoriesApi","read","userLoggedKey","setUserLoggedKey","csrfToken","setCsrfToken","userLoggedId","setUserLoggedId","userLoggedName","setUserLoggedName","updateView","setUpdateView","dishCategories","setDishCategories","dishes","setDishes","toastVisible","setToastVisible","toastMessage","setToastMessage","toastType","setToastType","getUserLoggedTokenValue","window","localStorage","getItem","getCsrftokenValue","_document$cookie$spli","document","cookie","split","find","row","startsWith","getUserLoggedId","getUserLoggedName","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/adolfo/Documents/menu_app_backup/menu_app/frontend/menu/src/context/userContext.js"],"sourcesContent":["import React, { createContext, useEffect, useState } from \"react\";\n// import getDishCategories from \"../services/dishCategory/getDishCategories\";\nimport {DISH_CATEGORIES} from \"../services/settings\"\nimport { fetchData } from \"../services/fetchData\";\n\nconst Context = createContext({})\nconst CategoriesContext = createContext({})\nconst UpdateViewContext = createContext({})\nconst ToastVisibilityContext = createContext({})\nconst DishesContext = createContext({})\n\n\n// const apiData = fetchData(DISH_CATEGORIES);\n\nconst fetchCategories = fetchData(DISH_CATEGORIES) \n\nconst UserContextProvider = ({ children }) => {\n\n    const apiData = fetchCategories;\n    const dishCategoriesApi = apiData.read();\n\n    const [userLoggedKey, setUserLoggedKey] = useState(null)\n    const [csrfToken, setCsrfToken] = useState(null)\n    const [userLoggedId, setUserLoggedId] = useState(null)\n    const [userLoggedName, setUserLoggedName] = useState(null)\n    const [updateView, setUpdateView] = useState(1)\n    const [dishCategories, setDishCategories] = useState(dishCategoriesApi)\n    const [dishes, setDishes] = useState([])\n    const [toastVisible, setToastVisible] = useState(false);\n    const [toastMessage, setToastMessage] = useState('')\n    const [toastType, setToastType] = useState('')\n    \n    useEffect(() => {        \n        const getUserLoggedTokenValue = () => {\n          return window.localStorage.getItem('logedUserToken')\n        }\n\n        const getCsrftokenValue = () => {\n          return document.cookie\n                .split('; ')\n                .find((row) => row.startsWith('csrftoken='))\n                ?.split('=')[1];\n        // \n        }\n\n        const getUserLoggedId = () => {\n          return window.localStorage.getItem('logedUserId')\n        }\n\n        const getUserLoggedName = () => {\n            return window.localStorage.getItem('logedUserName')\n          }\n\n\n\n        if(getUserLoggedTokenValue) {\n          setUserLoggedKey(getUserLoggedTokenValue)\n          setCsrfToken(getCsrftokenValue)\n          setUserLoggedId(getUserLoggedId)\n          setUserLoggedName(getUserLoggedName)\n          //console.log('token', userLogged, 'csfrtoken', csrfToken)\n        }\n        \n        const apiData = fetchCategories;\n        const dishCategoriesApi = apiData.read();\n        setDishCategories(dishCategoriesApi)\n\n      }, [])   \n\n    return (\n    \n      <Context.Provider value={{'key':[userLoggedKey, setUserLoggedKey], 'csfrToken': [csrfToken, setCsrfToken], 'userLoggedId': [userLoggedId, setUserLoggedId], 'userLoggedName': [userLoggedName, setUserLoggedName]}}>\n        <CategoriesContext.Provider value={[dishCategories, setDishCategories]}>\n          <UpdateViewContext.Provider value={[updateView, setUpdateView]}>\n            <ToastVisibilityContext.Provider value={[toastVisible, setToastVisible, toastMessage, setToastMessage, toastType, setToastType]}>\n                <DishesContext.Provider value={[dishes, setDishes]}>\n            {/*user state sent as Context value parameter*/}\n            {children}\n                </DishesContext.Provider>\n            </ToastVisibilityContext.Provider>\n          </UpdateViewContext.Provider>\n        </CategoriesContext.Provider>\n      </Context.Provider>\n      \n      )\n}\n\nexport { Context, CategoriesContext, UpdateViewContext, ToastVisibilityContext, DishesContext, UserContextProvider }"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}