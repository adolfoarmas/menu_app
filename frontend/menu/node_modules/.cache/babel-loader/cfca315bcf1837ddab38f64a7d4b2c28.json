{"ast":null,"code":"import _objectSpread from \"/home/adolfo/Documents/menu_app_backup/menu_app/frontend/menu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _slicedToArray from \"/home/adolfo/Documents/menu_app_backup/menu_app/frontend/menu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/slicedToArray\";\nimport _objectWithoutProperties from \"/home/adolfo/Documents/menu_app_backup/menu_app/frontend/menu/node_modules/babel-preset-react-app/node_modules/@babel/runtime/helpers/esm/objectWithoutProperties\";\nimport { createElement, forwardRef as forwardRefReact } from 'react';\nimport { useTranslation } from './useTranslation.js';\nimport { getDisplayName } from './utils.js';\nexport function withTranslation(ns) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  return function Extend(WrappedComponent) {\n    function I18nextWithTranslation(_ref) {\n      var forwardedRef = _ref.forwardedRef,\n        rest = _objectWithoutProperties(_ref, [\"forwardedRef\"]);\n      var _useTranslation = useTranslation(ns, _objectSpread({}, rest, {\n          keyPrefix: options.keyPrefix\n        })),\n        _useTranslation2 = _slicedToArray(_useTranslation, 3),\n        t = _useTranslation2[0],\n        i18n = _useTranslation2[1],\n        ready = _useTranslation2[2];\n      var passDownProps = _objectSpread({}, rest, {\n        t: t,\n        i18n: i18n,\n        tReady: ready\n      });\n      if (options.withRef && forwardedRef) {\n        passDownProps.ref = forwardedRef;\n      } else if (!options.withRef && forwardedRef) {\n        passDownProps.forwardedRef = forwardedRef;\n      }\n      return createElement(WrappedComponent, passDownProps);\n    }\n    I18nextWithTranslation.displayName = \"withI18nextTranslation(\".concat(getDisplayName(WrappedComponent), \")\");\n    I18nextWithTranslation.WrappedComponent = WrappedComponent;\n    var forwardRef = function forwardRef(props, ref) {\n      return createElement(I18nextWithTranslation, Object.assign({}, props, {\n        forwardedRef: ref\n      }));\n    };\n    return options.withRef ? forwardRefReact(forwardRef) : I18nextWithTranslation;\n  };\n}","map":null,"metadata":{},"sourceType":"module"}