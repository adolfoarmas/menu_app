{"ast":null,"code":"import { DISHES_END_POINT } from '../settings.js';\n\nconst handleErrors = async response => {\n  if (!response.ok) {\n    console.log('response', response);\n    let errorMessage = '';\n    const ApiMessages = await response.json();\n    console.log(await ApiMessages);\n    Object.entries(ApiMessages).forEach(_ref => {\n      let [key, value] = _ref;\n      const messages = value.join('\\n');\n      errorMessage += `${key}: ${messages}\\n`;\n      console.log('errorMessage', errorMessage);\n    });\n    throw new Error(errorMessage);\n  }\n\n  return response.json();\n};\n\nexport default async function editDish(payload, dishId, token, csfrToken) {\n  console.log(payload);\n  return fetch(DISHES_END_POINT + dishId + '/', {\n    method: 'PUT',\n    headers: {\n      //'Content-Type': 'application/json',\n      'Authorization': `Token` + token,\n      'X-CSRFToken': csfrToken\n    },\n    body: payload\n  }).then(handleErrors).then(async data => {\n    return await data;\n  }).catch(error => {\n    throw error.message;\n  });\n}","map":{"version":3,"names":["DISHES_END_POINT","handleErrors","response","ok","console","log","errorMessage","ApiMessages","json","Object","entries","forEach","key","value","messages","join","Error","editDish","payload","dishId","token","csfrToken","fetch","method","headers","body","then","data","catch","error","message"],"sources":["/home/adolfo/menu_app/frontend/menu/src/services/dish/editDish.js"],"sourcesContent":["import {DISHES_END_POINT} from '../settings.js'\n\nconst handleErrors = async (response) => {\n    if(!response.ok){\n        console.log('response', response)\n        let errorMessage = ''\n        const ApiMessages = await response.json();\n        console.log(await ApiMessages)\n        Object.entries(ApiMessages).forEach(([key, value]) => {\n            const messages = value.join('\\n');\n            errorMessage += `${key}: ${messages}\\n`;\n            console.log('errorMessage', errorMessage)\n          });\n        throw new Error (errorMessage);\n    }\n    return response.json()\n}\n\nexport default async function editDish(payload, dishId, token, csfrToken){\n    console.log(payload)\n    return fetch(DISHES_END_POINT + dishId + '/', {\n        method: 'PUT',\n        headers: {\n            //'Content-Type': 'application/json',\n            'Authorization': `Token` + token, \n            'X-CSRFToken':  csfrToken\n        },\n        body: payload\n    })\n    .then(handleErrors)\n    .then(async data => {\n        return await data\n    })\n    .catch(error => {\n        throw error.message\n    })\n}"],"mappings":"AAAA,SAAQA,gBAAR,QAA+B,gBAA/B;;AAEA,MAAMC,YAAY,GAAG,MAAOC,QAAP,IAAoB;EACrC,IAAG,CAACA,QAAQ,CAACC,EAAb,EAAgB;IACZC,OAAO,CAACC,GAAR,CAAY,UAAZ,EAAwBH,QAAxB;IACA,IAAII,YAAY,GAAG,EAAnB;IACA,MAAMC,WAAW,GAAG,MAAML,QAAQ,CAACM,IAAT,EAA1B;IACAJ,OAAO,CAACC,GAAR,CAAY,MAAME,WAAlB;IACAE,MAAM,CAACC,OAAP,CAAeH,WAAf,EAA4BI,OAA5B,CAAoC,QAAkB;MAAA,IAAjB,CAACC,GAAD,EAAMC,KAAN,CAAiB;MAClD,MAAMC,QAAQ,GAAGD,KAAK,CAACE,IAAN,CAAW,IAAX,CAAjB;MACAT,YAAY,IAAK,GAAEM,GAAI,KAAIE,QAAS,IAApC;MACAV,OAAO,CAACC,GAAR,CAAY,cAAZ,EAA4BC,YAA5B;IACD,CAJH;IAKA,MAAM,IAAIU,KAAJ,CAAWV,YAAX,CAAN;EACH;;EACD,OAAOJ,QAAQ,CAACM,IAAT,EAAP;AACH,CAdD;;AAgBA,eAAe,eAAeS,QAAf,CAAwBC,OAAxB,EAAiCC,MAAjC,EAAyCC,KAAzC,EAAgDC,SAAhD,EAA0D;EACrEjB,OAAO,CAACC,GAAR,CAAYa,OAAZ;EACA,OAAOI,KAAK,CAACtB,gBAAgB,GAAGmB,MAAnB,GAA4B,GAA7B,EAAkC;IAC1CI,MAAM,EAAE,KADkC;IAE1CC,OAAO,EAAE;MACL;MACA,iBAAkB,OAAD,GAAUJ,KAFtB;MAGL,eAAgBC;IAHX,CAFiC;IAO1CI,IAAI,EAAEP;EAPoC,CAAlC,CAAL,CASNQ,IATM,CASDzB,YATC,EAUNyB,IAVM,CAUD,MAAMC,IAAN,IAAc;IAChB,OAAO,MAAMA,IAAb;EACH,CAZM,EAaNC,KAbM,CAaAC,KAAK,IAAI;IACZ,MAAMA,KAAK,CAACC,OAAZ;EACH,CAfM,CAAP;AAgBH"},"metadata":{},"sourceType":"module"}